package net.malware.retooled.datagen;

import net.fabricmc.fabric.api.datagen.v1.FabricDataOutput;
import net.fabricmc.fabric.api.datagen.v1.provider.FabricAdvancementProvider;
import net.malware.retooled.item.RetooledItems;
import net.minecraft.advancement.Advancement;
import net.minecraft.advancement.AdvancementFrame;
import net.minecraft.advancement.AdvancementRewards;
import net.minecraft.advancement.criterion.InventoryChangedCriterion;
import net.minecraft.item.Items;
import net.minecraft.text.Text;
import net.minecraft.util.Identifier;

import java.util.function.Consumer;

import static net.minecraft.data.server.recipe.RecipeProvider.hasItem;

public class RetooledAdvancementProvider extends FabricAdvancementProvider {
    public RetooledAdvancementProvider(FabricDataOutput output) {super(output);}

    @Override
    public void generateAdvancement(Consumer<Advancement> consumer) {
        Advancement storyRoot = Advancement.Builder.create()
                .display(
                        Items.GRASS_BLOCK,
                        Text.translatable("advancements.story.root.title"),
                        Text.translatable("advancements.story.root.description"),
                        new Identifier("minecraft:textures/gui/advancements/backgrounds/stone.png"),
                        AdvancementFrame.TASK,
                        true,
                        false,
                        false
                )
                .criterion(hasItem(Items.CRAFTING_TABLE), InventoryChangedCriterion.Conditions.items(Items.CRAFTING_TABLE))
                .build(consumer, "story/root");
        Advancement mineStoneAdvancement = Advancement.Builder.create().parent(storyRoot)
                .display(
                        RetooledItems.FLINT_PICKAXE,
                        Text.translatable("advancements.story.mine_stone.title"),
                        Text.translatable("advancements.story.mine_stone.description"),
                        null,
                        AdvancementFrame.TASK,
                        false,
                        true,
                        false
                )
                .rewards(AdvancementRewards.Builder.experience(1000))
                .criterion("has_stone", InventoryChangedCriterion.Conditions.items(Items.COBBLESTONE))
                .build(consumer, "story/mine_stone");
        Advancement upgradeToolAdvancement = Advancement.Builder.create().parent(mineStoneAdvancement)
                .display(
                        RetooledItems.COPPER_PICKAXE,
                        Text.translatable("advancements.story.upgrade_tools.title"),
                        Text.translatable("advancements.story.upgrade_tools.description"),
                        null,
                        AdvancementFrame.TASK,
                        false,
                        true,
                        false
                )
                .rewards(AdvancementRewards.Builder.experience(1000))
                .criterion("has_copper_pickaxe", InventoryChangedCriterion.Conditions.items(RetooledItems.COPPER_PICKAXE))
                .build(consumer, "story/upgrade_tools");

    }

}
